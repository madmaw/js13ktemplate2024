precision lowp float;
uniform sampler2D u_texture;
uniform mat3 u_modelPositionToScreenPosition;
uniform mat3 u_screenPositionToTextureCoord;
uniform vec3 u_scale;

attribute vec3 a_modelPosition;

varying vec3 v_screenPosition;

export void vertex() {
  v_screenPosition = u_modelPositionToScreenPosition * a_modelPosition;
  gl_Position = vec4(v_screenPosition, 1);
}

export void fragment() {
  float screenLength = max(u_scale.x, length(v_screenPosition.xy));
  vec2 sourceScreenPosition = v_screenPosition.xy
    + (v_screenPosition.xy - v_screenPosition.xy/screenLength) * pow(screenLength - u_scale.x, u_scale.z) * u_scale.y;
  vec3 textureCoord = u_screenPositionToTextureCoord * vec3(sourceScreenPosition, 1);
  // TODO how do we smooth this?
  vec4 textureColor = textureCoord.x < 0.
    || textureCoord.x > 1.
    || textureCoord.y < 0.
    || textureCoord.y > 1.
    ? vec4(0)
    : texture2D(u_texture, textureCoord.xy);
  gl_FragColor = textureColor;
}
