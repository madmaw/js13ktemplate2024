precision lowp float;
uniform sampler2D u_background;
uniform sampler2D u_texture;
uniform mat3 u_modelPositionToTextureCoord;
uniform mat3 u_modelPositionToScreenPosition;
uniform mat3 u_screenPositionToBackgroundCoord;
uniform vec4 u_palette[4];
uniform vec3 u_lightNormal;

attribute vec3 a_modelPosition;

varying vec3 v_textureCoord;
varying vec3 v_backgroundCoord;

export void vertex() {
  v_textureCoord = u_modelPositionToTextureCoord * a_modelPosition;
  vec3 screenPosition = u_modelPositionToScreenPosition * a_modelPosition;
  v_backgroundCoord = u_screenPositionToBackgroundCoord * screenPosition;
  gl_Position = vec4(screenPosition, 1);
}

export void fragment() {
  vec4 textureColor = texture2D(u_texture, v_textureCoord.xy);
  vec4 backgroundColor = texture2D(u_background, v_backgroundCoord.xy);
  // backgroundColor = vec4(backgroundColor.a, 0, 0, backgroundColor.a);
  vec4 paletteColor1 = mix(u_palette[0], u_palette[1], textureColor.b);
  vec4 paletteColor2 = mix(u_palette[2], u_palette[3], textureColor.b);
  vec4 paletteColor = mix(paletteColor1, paletteColor2, max(0., textureColor.a - .5) * 2.);
  vec3 normal = vec3(textureColor.rg - vec2(.5), 1);
  float light = max(0., dot(normal, u_lightNormal) * .5 + .5);
  vec3 litColor = pow(paletteColor.rgb * light, vec3(.5));
  vec3 overlayColor = mix(backgroundColor.rgb, litColor, paletteColor.a);
  gl_FragColor = vec4(overlayColor, 1. - (1. - paletteColor.a) * (1. - backgroundColor.a));
  // gl_FragColor = vec4(v_textureCoord, 1);
  // gl_FragColor = vec4(color, max(paletteColor.a, backgroundColor.a));
}
