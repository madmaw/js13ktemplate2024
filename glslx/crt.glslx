precision lowp float;
uniform sampler2D u_texture;
uniform mat3 u_modelPositionToScreenPosition;
uniform mat3 u_screenPositionToScanline;
uniform vec4 u_scanlineColor;

attribute vec3 a_modelPosition;

varying vec3 v_textureCoord;
varying vec3 v_screenPosition;
varying vec3 v_scanlinePosition;

export void vertex() {
  v_textureCoord = a_modelPosition;
  v_screenPosition = u_modelPositionToScreenPosition * a_modelPosition;
  v_scanlinePosition = u_screenPositionToScanline * v_screenPosition;
  gl_Position = vec4(v_screenPosition, 1);
}

export void fragment() {
  vec4 textureColor = texture2D(u_texture, v_textureCoord.xy);
  float proportion = pow(abs((mod(v_scanlinePosition.y, 1.) - .5) * 2.), 4.);
  gl_FragColor = mix(textureColor, vec4(u_scanlineColor.rgb, 1), proportion * u_scanlineColor.a);
}
