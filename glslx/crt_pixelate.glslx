precision lowp float;
uniform sampler2D u_texture;
uniform sampler2D u_pixels;
uniform mat3 u_modelPositionToScreenPosition;
uniform mat3 u_modelPositionToPixelPosition;

attribute vec3 a_modelPosition;

varying vec3 v_textureCoord;
varying vec3 v_pixelPosition;

export void vertex() {
  v_textureCoord = a_modelPosition;
  vec3 screenPosition = u_modelPositionToScreenPosition * a_modelPosition;
  v_pixelPosition = u_modelPositionToPixelPosition * a_modelPosition;
  gl_Position = vec4(screenPosition, 1);
}

export void fragment() {
  vec4 pixelFilter = texture2D(u_pixels, v_pixelPosition.xy);
  vec4 textureColor = texture2D(u_texture, v_textureCoord.xy);
  gl_FragColor = vec4(max(vec3(.1), textureColor.rgb), 1) * pixelFilter;
  // gl_FragColor = textureColor * vec4(1, 0, 0, 1);
}
